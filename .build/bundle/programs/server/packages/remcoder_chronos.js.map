{"version":3,"sources":["meteor://ðŸ’»app/packages/remcoder:chronos/chronos.js"],"names":["moment","require","e","_timers","Timer","interval","time","ReactiveVar","prototype","start","_timer","Error","set","Date","setInterval","Meteor","bindEnvironment","bind","stop","clearInterval","_update","comp","Tracker","currentComputation","cid","_id","timer","destroy","onInvalidate","stopped","dep","depend","_moment","apply","arguments","_date","_now","now","Chronos","update","date","liveUpdate","currentTime","liveMoment"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,eAAJ,C,CAEA;;AACA,IAAI;AACDA,WAASC,QAAQ,QAAR,CAAT;AACF,CAFD,CAGA,OAAMC,CAAN,EAAS,CACR;;AAED,IAAMC,UAAU,EAAhB;;AAEA,SAASC,KAAT,CAAeC,QAAf,EAAyB;AACvB,OAAKA,QAAL,GAAgBA,YAAY,IAA5B;AACA,OAAKC,IAAL,GAAY,IAAIC,WAAJ,CAAgB,CAAhB,CAAZ;AACD;;AAEDH,MAAMI,SAAN,CAAgBC,KAAhB,GAAwB,YAAW;AACjC,MAAI,KAAKC,MAAT,EAAiB,MAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;AACjB,OAAKL,IAAL,CAAUM,GAAV,CAAc,IAAIC,IAAJ,EAAd;AAGA,OAAKH,MAAL,GAAcI,YAAYC,OAAOC,eAAP,CAAuB,YAAW;AAC1D;AACA,SAAKV,IAAL,CAAUM,GAAV,CAAc,IAAIC,IAAJ,EAAd;AAED,GAJgD,CAI/CI,IAJ+C,CAI1C,IAJ0C,CAAvB,CAAZ,EAIC,KAAKZ,QAJN,CAAd;AAKD,CAVD;;AAYAD,MAAMI,SAAN,CAAgBU,IAAhB,GAAuB,YAAW;AAChC;AACAC,gBAAc,KAAKT,MAAnB;AACA,OAAKA,MAAL,GAAc,IAAd;AACD,CAJD;;AAMA,SAASU,OAAT,CAAiBf,QAAjB,EAA2B;AACzB;AACA,MAAMgB,OAAOC,QAAQC,kBAArB;AACA,MAAI,CAACF,IAAL,EACE,OAJuB,CAIf;AAEV;;AACA,MAAMG,MAAOH,QAAQA,KAAKI,GAA1B;;AACA,MAAI,CAACtB,QAAQqB,GAAR,CAAL,EAAmB;AACjB,QAAME,QAAQ,IAAItB,KAAJ,CAAUC,QAAV,CAAd;AACAF,YAAQqB,GAAR,IAAeE,KAAf,CAFiB,CAIjB;;AACAA,UAAMC,OAAN,GAAgB,YAAW;AACzBD,YAAMR,IAAN;AACA,aAAOf,QAAQqB,GAAR,CAAP;AACD,KAHD;;AAKAE,UAAMjB,KAAN;AACD,GAnBwB,CAqBzB;;;AACAY,OAAKO,YAAL,CAAkB,YAAW;AAC3B;AACA,QAAIP,KAAKQ,OAAL,IAAgB1B,QAAQqB,GAAR,CAApB,EAAkC;AAChC;AACArB,cAAQqB,GAAR,EAAaG,OAAb;AACD;AACF,GAND;;AAQAxB,UAAQqB,GAAR,EAAalB,IAAb,CAAkBwB,GAAlB,CAAsBC,MAAtB,CAA6BV,IAA7B,EA9ByB,CA8BW;AAEpC;;;AACA,SAAOlB,QAAQqB,GAAR,CAAP;AACD,C,CAED;AACA;AACA;;;AACA,SAASQ,OAAT,GAAiB,eAAiB;AAChC,MAAI,CAAChC,MAAL,EAAa,MAAM,IAAIW,KAAJ,CAAU,2CAAV,CAAN;;AAEbS;;AACA,SAAOpB,OAAOiC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACD,C,CAED;;;AACA,SAASC,KAAT,CAAe9B,QAAf,EAAyB;AACvBe,UAAQf,QAAR;;AACA,SAAO,IAAIQ,IAAJ,EAAP;AACD,C,CAED;;;AACA,SAASuB,IAAT,CAAc/B,QAAd,EAAwB;AACtBe,UAAQf,QAAR;;AACA,SAAOQ,KAAKwB,GAAL,EAAP;AACD,C,CAED;;;AACAC,UAAU;AAER;AACA;AACA;AACAlC,cALQ;AAOR;AACA;AACA;AACAmC,UAAQnB,OAVA;AAYR;AACAoB,QAAOL,KAbC;AAeR;AACAE,OAAMD,IAhBE;AAkBR;AACA;AACA;AACApC,UAASgC,OArBD;AAuBR;AACA7B,kBAxBQ;AA0BR;AACAsC,cAAarB,OA3BL;AA4BRsB,eAAcP,KA5BN;AA6BRQ,cAAaX;AA7BL,CAAV,2H","file":"/packages/remcoder_chronos.js","sourcesContent":["let moment;\n\n// if moment is not installed, fine. We don't require it as a hard dependency\ntry {\n   moment = require('moment');\n}\ncatch(e) {\n}\n\nconst _timers = {};\n\nfunction Timer(interval) {\n  this.interval = interval || 1000;\n  this.time = new ReactiveVar(0);  \n}\n\nTimer.prototype.start = function() {\n  if (this._timer) throw new Error('Trying to start Chronos.Timer but it is already running.');\n  this.time.set(new Date());\n\n\n  this._timer = setInterval(Meteor.bindEnvironment(function() {\n    //console.log('tick', this._timer);\n    this.time.set(new Date());\n\n  }.bind(this)), this.interval);\n};\n\nTimer.prototype.stop = function() {\n  //console.log('stopping timer');\n  clearInterval(this._timer);\n  this._timer = null;\n};\n\nfunction _update(interval) {\n  // get current reactive context\n  const comp = Tracker.currentComputation;\n  if (!comp)\n    return; // no nothing when used outside a reactive context\n\n  // only create one timer per reactive context to prevent stacking of timers\n  const cid =  comp && comp._id;\n  if (!_timers[cid]) {\n    const timer = new Timer(interval);\n    _timers[cid] = timer;\n\n    // add destroy method that stops the timer and removes itself from the list\n    timer.destroy = function() {\n      timer.stop();\n      delete _timers[cid];\n    };\n\n    timer.start();\n  }\n\n  // make sure to stop and delete the attached timer when the computation is stopped\n  comp.onInvalidate(function() {\n    //console.log('onInvalidated',comp);\n    if (comp.stopped && _timers[cid]) {\n      //console.log('computation stopped');\n      _timers[cid].destroy();\n    }\n  });\n\n  _timers[cid].time.dep.depend(comp); // make dependent on time\n\n  //console.log(_timers);\n  return _timers[cid];\n}\n\n// reactive version of moment()\n// please install moment separately\n// example usage: Chronos.moment(someTimestamp).format('ss');\nfunction _moment(/* arguments */) {\n  if (!moment) throw new Error('moment not found. Please install it first');\n  \n  _update();\n  return moment.apply(null, arguments);\n}\n\n// reactive version of new Date() get the current date/time\nfunction _date(interval) {\n  _update(interval);\n  return new Date();\n}\n\n// reactive version of Date.now(). get the current # of milliseconds since the start of the epoch\nfunction _now(interval) {\n  _update(interval);\n  return Date.now();\n}\n\n// export global\nChronos = {\n\n  // a simple reactive timer\n  // usage: var timer = new Timer();\n  // get current time: timer.time.get();\n  Timer,\n\n  // handy util func for making reactive contexts live updating in time\n  // usage: simply call Chronos.update() in your helper to make it execute\n  // every interval\n  update: _update,\n\n  // reactive version of new Date() get the current date/time\n  date : _date,\n\n  // reactive version of Date.now(). get the current # of milliseconds since the start of the epoch\n  now : _now,\n\n  // reactive version of moment()\n  // please install moment separately\n  // example usage: Chronos.moment(someTimestamp).format('ss');\n  moment : _moment,\n\n  // for debugging and testing\n  _timers,\n\n  // deprecated. but kept for backwards compatibility\n  liveUpdate : _update,\n  currentTime : _date,\n  liveMoment : _moment\n};"]}